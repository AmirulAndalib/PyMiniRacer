trigger:
- master

stages:
- stage: build
  jobs:
  - job: linux
    timeoutInMinutes: 180
    displayName: Build on Linux
    pool: {vmImage: 'Ubuntu-16.04'}
    variables:
      plat_name: "manylinux1_x86_64"
    steps:
     - checkout: self
     - bash: |
        curl -L "$LINK/$SCCACHE_VERSION/sccache-$SCCACHE_VERSION-$SCCACHE_PLATFORM.tar.gz" | tar -xz -f - -C "$(Pipeline.Workspace)"
        echo "##vso[task.prependpath]$(Pipeline.Workspace)/sccache-$SCCACHE_VERSION-$SCCACHE_PLATFORM/"
       env:
         LINK: https://github.com/mozilla/sccache/releases/download
         SCCACHE_VERSION: 0.2.12
         SCCACHE_PLATFORM: x86_64-unknown-linux-musl
       displayName: Install sccache
     - bash: sccache --start-server
       env:
         SCCACHE_DIR: $(Build.SourcesDirectory)/py_mini_racer/extension/out/sccache
         SCCACHE_CACHE_SIZE: 128M
         SCCACHE_IDLE_TIMEOUT: 0
     - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
     - {task: UsePythonVersion@0, inputs: {versionSpec: '2.7', architecture: x64}}
     - task: Cache@2
       inputs:
         key: 'v8 | linux | helpers/v8_build.py'
         path: py_mini_racer/extension/out
       displayName: Cache V8 build
     - script: |
         python3 -m pip install setuptools wheel
         mkdir wheelhouse
         python3 helpers/build_package.py wheel wheelhouse
       env:
         GN_ARGS: 'cc_wrapper="sccache"'
       displayName: Build the Wheelhouse
     - script: |
         python3 -m pip install auditwheel
         for i in wheelhouse/*.whl; do auditwheel show $i; done
       displayName: Patch the Wheelhouse
     - script: |
         python -m pip install twine readme_renderer[md]
         twine check wheelhouse/*.whl
       displayName: Check the wheels
     - publish: wheelhouse
     - bash: sccache --stop-server
       condition: always()
       displayName: Stop sccache
  - job: mac
    timeoutInMinutes: 180
    displayName: Build on macOS
    pool: {vmImage: 'macOS-10.14'}
    variables:
      plat_name: "macosx_10_10_x86_64"
    steps:
     - checkout: self
     - bash: |
        curl -L "$LINK/$SCCACHE_VERSION/sccache-$SCCACHE_VERSION-$SCCACHE_PLATFORM.tar.gz" | tar -xz -f - -C "$(Pipeline.Workspace)"
        echo "##vso[task.prependpath]$(Pipeline.Workspace)/sccache-$SCCACHE_VERSION-$SCCACHE_PLATFORM/"
       env:
         LINK: https://github.com/mozilla/sccache/releases/download
         SCCACHE_VERSION: 0.2.12
         SCCACHE_PLATFORM: x86_64-apple-darwin
       displayName: Install sccache
     - bash: sccache --start-server
       env:
         SCCACHE_DIR: $(Build.SourcesDirectory)/py_mini_racer/extension/out/sccache
         SCCACHE_CACHE_SIZE: 128M
         SCCACHE_IDLE_TIMEOUT: 0
       displayName: Start sccache
     - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
     - {task: UsePythonVersion@0, inputs: {versionSpec: '2.7', architecture: x64}}
     - task: Cache@2
       inputs:
         key: 'v8 | macos | helpers/v8_build.py'
         path: py_mini_racer/extension/out
       displayName: Cache V8 build
     - script: |
         python3 -m pip install setuptools wheel
         mkdir wheelhouse
         python3 helpers/build_package.py wheel wheelhouse
       env:
         GN_ARGS: 'cc_wrapper="sccache"'
       displayName: Build the wheelhouse
     - publish: wheelhouse
     - bash: sccache --stop-server
       condition: always()
       displayName: Stop sccache
  - job: windows
    timeoutInMinutes: 180
    displayName: Build on Windows
    pool: {vmImage: 'windows-2019'}
    variables:
      plat_name: "win_amd64"
    steps:
     - script: git config --global core.symlinks true
     - checkout: self
     - bash: |
        curl -LO "$LINK/$SCCACHE_VERSION/sccache-$SCCACHE_VERSION-$SCCACHE_PLATFORM.tar.gz"
        tar -xzf "sccache-$SCCACHE_VERSION-$SCCACHE_PLATFORM.tar.gz"
        echo "##vso[task.prependpath]$(Pipeline.Workspace)\\sccache-$SCCACHE_VERSION-$SCCACHE_PLATFORM\\"
       env:
         LINK: https://github.com/mozilla/sccache/releases/download
         SCCACHE_VERSION: 0.2.12
         SCCACHE_PLATFORM: x86_64-pc-windows-msvc
       workingDirectory: $(Pipeline.Workspace)
       displayName: Install sccache
     - bash: sccache --start-server
       env:
         SCCACHE_DIR: $(Build.SourcesDirectory)/py_mini_racer/extension/out/sccache
         SCCACHE_CACHE_SIZE: 128M
         SCCACHE_IDLE_TIMEOUT: 0
       displayName: Start sccache
     - powershell: |
         Remove-Item C:\ProgramData\Chocolatey\bin\python2.7.exe -force
         Remove-Item C:\ProgramData\Chocolatey\bin\python2.exe -force
       displayName: Remove extraneous Python Interpreters
     - {task: UsePythonVersion@0, inputs: {versionSpec: '2.7', architecture: x64}}
     - bash: echo "##vso[task.prependpath]$(Build.SourcesDirectory)\\py_mini_racer\\extension\\depot_tools\\"
     - task: Cache@2
       inputs:
         key: 'v8 | windows | helpers/v8_build.py'
         path: py_mini_racer/extension/out
       displayName: Cache V8 build
     - script: |
         python helpers/v8_build.py --target py_mini_racer_shared_lib
         cp py_mini_racer/extension/out/mini_racer.dll py_mini_racer/mini_racer.dll
       env:
         GN_ARGS: 'cc_wrapper="sccache"'
       displayName: Build the extension
     - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
     - script: |
         python -m pip install wheel
         mkdir wheelhouse
         python setup.py bdist_wheel --dist-dir wheelhouse --python-tag py2.py3 --plat-name $(plat_name)
       displayName: Build the Wheelhouse
     - publish: wheelhouse
     - bash: sccache --stop-server
       condition: always()
       displayName: Stop sccache
  - job: alpine
    timeoutInMinutes: 180
    displayName: Build on Alpine Linux
    pool: {vmImage: 'Ubuntu-16.04'}
    container: nicolassqreen/azure-pipelines-container-alpine-python:3.12
    steps:
     - checkout: self
     - bash: |
        curl -L "$LINK/$SCCACHE_VERSION/sccache-$SCCACHE_VERSION-$SCCACHE_PLATFORM.tar.gz" | tar -xz -f - -C "$(Pipeline.Workspace)"
        echo "##vso[task.prependpath]$(Pipeline.Workspace)/sccache-$SCCACHE_VERSION-$SCCACHE_PLATFORM/"
       env:
         LINK: https://github.com/mozilla/sccache/releases/download
         SCCACHE_VERSION: 0.2.12
         SCCACHE_PLATFORM: x86_64-unknown-linux-musl
       displayName: Install sccache
     - bash: sccache --start-server
       env:
         SCCACHE_DIR: $(Build.SourcesDirectory)/py_mini_racer/extension/out/sccache
         SCCACHE_CACHE_SIZE: 128M
         SCCACHE_IDLE_TIMEOUT: 0
       displayName: Start sccache
     - bash: python helpers/v8_build.py --no-build --no-sysroot
       displayName: Download V8 sources
       target: host
     - task: Cache@2
       inputs:
         key: 'v8 | alpine | helpers/v8_build.py'
         path: py_mini_racer/extension/out
       displayName: Cache V8 build
     - bash: |
         sudo apk -U add samurai llvm lld linux-headers binutils-gold
         cp -f /usr/local/bin/gn py_mini_racer/extension/v8/buildtools/linux64/gn
         rm -f py_mini_racer/extension/depot_tools/ninja
       displayName: Prepare Aline Linux build environment
     - bash: |
         python helpers/v8_build.py --no-update --no-sysroot --target py_mini_racer_shared_lib
         cp py_mini_racer/extension/out/libmini_racer.so py_mini_racer/libmini_racer.muslc.so
       env:
         GN_ARGS: 'cc_wrapper="sccache"'
       displayName: Build the extension
     - bash: |
         sudo apk add py3-pip py3-wheel
         mkdir wheelhouse
         python3 setup.py bdist_wheel --dist-dir wheelhouse --python-tag py2.py3 --plat-name linux_x86_64
       displayName: Build the Wheelhouse
     - bash: python3 setup.py sdist --dist-dir wheelhouse
       displayName: Build the source package
     - publish: wheelhouse
     - bash: sccache --stop-server
       condition: always()
       displayName: Stop sccache

- stage: test
  jobs:
  - job: linux
    displayName: Test on Linux
    pool: {vmImage: 'Ubuntu-16.04'}
    variables:
      plat_name: "manylinux1_x86_64"
    steps:
     - checkout: self
     - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
     - download: current
       artifact: build.linux
     - script: |
         python -m pip install $(Pipeline.Workspace)/build.linux/*.whl
         python -m pip install pytest
         pytest $(Build.SourcesDirectory)/tests
       displayName: Test the Wheel
  - job: mac
    displayName: Test on macOS
    pool: {vmImage: 'macOS-10.14'}
    variables:
      plat_name: "macosx_10_9_x86_64"
    steps:
     - checkout: self
     - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
     - download: current
       artifact: build.mac
     - script: |
         python -m pip install $(Pipeline.Workspace)/build.mac/*.whl
         python -m pip install pytest
         pytest $(Build.SourcesDirectory)/tests
       displayName: Test the Wheel
  - job: windows
    displayName: Test on Windows
    pool: {vmImage: 'vs2017-win2016'}
    variables:
      plat_name: "win_amd64"
    steps:
     - script: git config --global core.symlinks true
     - checkout: self
     - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
     - download: current
       artifact: build.windows
     - bash: |
         python -m pip install ../build.windows/*.whl
         python -m pip install pytest
         pytest tests
       displayName: Test the Wheel
  - job: alpine
    displayName: Test on Alpine Linux
    container: nicolassqreen/azure-pipelines-container-alpine-python:latest
    steps:
     - checkout: self
     - download: current
       artifact: build.alpine
     - bash: |
         sudo /opt/python/cp36-cp36m/bin/python -m pip install $(Pipeline.Workspace)/build.alpine/*.tar.gz
         sudo /opt/python/cp36-cp36m/bin/python -m pip install pytest
         /opt/python/cp36-cp36m/bin/pytest $(Build.SourcesDirectory)/tests
       displayName: Test the Source Dist

- stage: release
  condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/'))
  jobs:
  - job: release
    steps:
    - download: current
    - task: S3Upload@1
      displayName: Publish Wheelhouse to S3
      inputs:
        awsCredentials: AWS
        bucketName: sqreen-download-private
        globExpressions: |
          **/py_mini_racer-*.whl
          **/py_mini_racer-*.tar.gz
        targetFolder: python/py-mini-racer/
        sourceFolder: $(Pipeline.Workspace)
        flattenFolders: true
